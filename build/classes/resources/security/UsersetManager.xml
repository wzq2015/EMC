<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE sqlMap  PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"               
"http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="Userset">

	<typeAlias alias="Userset"
		type="com.baosight.platform.core.security.userset.Userset" />
	<typeAlias alias="Member" type="java.util.HashMap" />

	<resultMap id="UsersetResult" class="Userset">
		<result property="Name" column="name" />
		<result property="DisplayName" column="display_name" />
		<result property="Desc" column="desc_info" />
		<result property="Index" column="sort_index" />
		<result property="Attribute" column="attribute" />
      	<result property="Property" column="property" />
      	<result property="Ext1" column="ext1" />
      	<result property="Ext2" column="ext2" />
      	<result property="Ext3" column="ext3" />
      	<result property="ext3_equal" column="ext3" />
		<result property="UsersetType" column="userset_type" />
		<result property="rec_creator" column="rec_creator" />
		<result property="rec_create_time" column="rec_create_time" />
		<result property="rec_revisor" column="rec_revisor" />
		<result property="rec_revise_time" column="rec_revise_time" />
		<result property="archive_flag" column="archive_flag" />
	</resultMap>
	<resultMap id="MemberResult" class="Member">
		<result property="SetName" column="set_name" />
		<result property="MemberName" column="member_name" />
		<result property="MemberType" column="member_type" />
	</resultMap>
	<resultMap id="UserResult" class="User" extends="User.QueryResult" />

	<insert id="Insert" parameterClass="Userset">
		insert into ${platSchema}.t_es_userset(name,display_name,desc_info,sort_index,attribute,property,ext1,ext2,ext3,userset_type,rec_creator,rec_create_time,rec_revisor,rec_revise_time,archive_flag)
		values(#Name:VARCHAR#, #DisplayName:VARCHAR#, #Desc:VARCHAR#, #Index#,#Attribute:VARCHAR#,#Property:VARCHAR#,#Ext1:VARCHAR#,#Ext2:VARCHAR#,#Ext3:VARCHAR#,#UsersetType:VARCHAR#,#rec_creator:VARCHAR#,#rec_create_time:VARCHAR#,#rec_revisor:VARCHAR#,#rec_revise_time:VARCHAR#,#archive_flag:VARCHAR#)
	</insert>

	<insert id="AddMember" parameterClass="Member">
		insert into
		${platSchema}.t_es_userset_member(set_name,member_name,member_type)
		values(#SetName:VARCHAR#, #MemberName:VARCHAR#, #MemberType:VARCHAR#)
	</insert>

	<update id="Update" parameterClass="Userset">
		update ${platSchema}.t_es_userset set 
		<dynamic prepend=" ">
			<isNotEmpty property="rec_creator">
				rec_creator = #rec_creator:VARCHAR#,
			</isNotEmpty>
		</dynamic>
		<dynamic prepend=" ">
			<isNotEmpty property="rec_create_time">
				rec_create_time = #rec_create_time:VARCHAR#,
			</isNotEmpty>
		</dynamic>
		<dynamic prepend=" ">
			<isNotEmpty property="rec_revisor">
				rec_revisor = #rec_revisor:VARCHAR#,
			</isNotEmpty>
		</dynamic>
		<dynamic prepend=" ">
			<isNotEmpty property="rec_revise_time">
				rec_revise_time = #rec_revise_time:VARCHAR#,
			</isNotEmpty>
		</dynamic>
		<dynamic prepend=" ">
			<isNotEmpty property="archive_flag">
				archive_flag = #archive_flag:VARCHAR#,
			</isNotEmpty>
		</dynamic>
		display_name = #DisplayName#, 
		desc_info = #Desc:VARCHAR#, 
		sort_index = #Index#,
		attribute = #Attribute:VARCHAR#,
      	property = #Property:VARCHAR#,
      	ext1 = #Ext1:VARCHAR#,
      	ext2 = #Ext2:VARCHAR#,
      	ext3 = #Ext3:VARCHAR# 
		where name = #Name#
	</update>

	<select id="Query" parameterClass="Userset"
		resultMap="UsersetResult">
		select * from ${platSchema}.t_es_userset where 1=1
		<dynamic prepend=" AND ">
			<isNotNull property="Name">name = #Name#</isNotNull>
		</dynamic>
	</select>

	<sql id="SelectMember">
		from ${platSchema}.t_es_userset_member where 1=1
		<dynamic prepend=" AND ">
			<isNotEmpty property="SetName">
				set_name = #SetName#
			</isNotEmpty>
		</dynamic>
		<dynamic prepend=" AND ">
			<isNotEmpty property="MemberName">
				member_name = #MemberName#
			</isNotEmpty>
		</dynamic>
		<dynamic prepend=" AND ">
			<isNotEmpty property="MemberType">
				member_type = #MemberType#
			</isNotEmpty>
		</dynamic>
	</sql>

	<select id="QueryMember" parameterClass="Map"
		resultMap="MemberResult">
		select *
		<include refid="SelectMember" />
	</select>

	<sql id="QueryUsersetWithCondition">
		<dynamic prepend=" AND ">
			<isNotEmpty property="Name">
				name LIKE '%'+#Name#+'%'
			</isNotEmpty>
		</dynamic>
		<dynamic prepend=" AND ">
			<isNotEmpty property="DisplayName">
				display_name LIKE '%'+#DisplayName#+'%'
			</isNotEmpty>
		</dynamic>
		<dynamic prepend=" AND ">
			<isNotEmpty property="Desc">
				desc_info LIKE '%'+#Desc#+'%'
			</isNotEmpty>
		</dynamic>
		<dynamic prepend=" AND ">
			<isNotEmpty property="Index">
				sort_index LIKE '%'+#Index#+'%'
			</isNotEmpty>
		</dynamic>
		<dynamic prepend=" AND ">
	        <isNotEmpty property="Attribute">
	          attribute  LIKE '%'+#Attribute#+'%'
	        </isNotEmpty>
      	</dynamic>
      	<dynamic prepend=" AND ">
	        <isNotEmpty property="Property">
	          property  LIKE '%'+#Property#+'%'
	        </isNotEmpty>
	    </dynamic>
	    <dynamic prepend=" AND ">
	        <isNotEmpty property="Ext1">
	          ext1  LIKE '%'+#Ext1#+'%'
	        </isNotEmpty>
	    </dynamic>
	    <dynamic prepend=" AND ">
	        <isNotEmpty property="Ext2">
	          ext2  LIKE '%'+#Ext2#+'%'
	        </isNotEmpty>
	    </dynamic>
	    <dynamic prepend=" AND ">
	        <isNotEmpty property="Ext3">
	          ext3  LIKE '%'+#Ext3#+'%'
	        </isNotEmpty>
	    </dynamic>
		<dynamic prepend=" AND ">
	        <isNotEmpty property="UsersetType">
	          userset_type  = #UsersetType#
	        </isNotEmpty>
        </dynamic>
        <dynamic prepend=" AND ">
	        <isNotEmpty property="ext3_equal">
	          ext3  = #ext3_equal#
	        </isNotEmpty>
      	</dynamic>
	</sql>

	<sql id="SortUsersetWithCondition">
		order by
		<dynamic prepend=" ">
			<isEqual property="OrderKey" compareValue="Name">
				name
			</isEqual>
			<isEqual property="OrderKey" compareValue="DisplayName">
				display_name
			</isEqual>
			<isEqual property="OrderKey" compareValue="Desc">
				desc
			</isEqual>
			<isEqual property="OrderKey" compareValue="Attribute">
	          attribute
	        </isEqual>
	        <isEqual property="OrderKey" compareValue="Property">
	          property
	        </isEqual>
	        <isEqual property="OrderKey" compareValue="Ext1">
	          ext1
	        </isEqual>
	        <isEqual property="OrderKey" compareValue="Ext2">
	          ext2
	        </isEqual>
	        <isEqual property="OrderKey" compareValue="Ext3">
	          ext3
	        </isEqual>
			<isEqual property="OrderKey" compareValue="UsersetType">
	          userset_type
	        </isEqual>
			<isNotEqual property="OrderValue" compareValue="NotSet">
				$OrderValue$,
			</isNotEqual>
		</dynamic>
		sort_index DESC
		<dynamic prepend=" ">
			<isNotEqual property="OrderKey" compareValue="Name">
				,name ASC
			</isNotEqual>
		</dynamic>
	</sql>

   <sql id="QueryUserWithCondition">
      <dynamic prepend=" AND ">
        <isNotEmpty property="Name">
          name  LIKE '%'+#Name#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="DisplayName">
          display_name  LIKE '%'+#DisplayName#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Desc">
          desc  LIKE '%'+#Desc#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="LastName">
          last_name  LIKE '%'+#LastName#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="FirstName">
          first_name  LIKE '%'+#FirstName#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="MiddleName">
          middle_name  LIKE '%'+#MiddleName#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="NickName">
          nick_name  LIKE '%'+#NickName#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Title">
          title  LIKE '%'+#Title#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Initials">
          initials  LIKE '%'+#Initials#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="FullName">
          full_name  LIKE '%'+#FullName#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Prof">
          prof  LIKE '%'+#Prof#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Position">
          position  LIKE '%'+#Position#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Dept">
          dept  LIKE '%'+#Dept#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Account">
          account  LIKE '%'+#Account#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="IDNumber">
          id_number  LIKE '%'+#IDNumber#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="WorkNumber">
          work_number  LIKE '%'+#WorkNumber#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Gender">
          gender  LIKE '%'+#Gender#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Birthday">
          birthday  LIKE '%'+#Birthday#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Country">
          country  LIKE '%'+#Country#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Province">
          province  LIKE '%'+#Province#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="City">
          city  LIKE '%'+#City#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Street">
          street  LIKE '%'+#Street#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Addr">
          addr  LIKE '%'+#Addr#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="HomeAddr">
          home_addr  LIKE '%'+#HomeAddr#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="OfficeAddr">
          office_addr  LIKE '%'+#OfficeAddr#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="BusinessAddr">
          business_addr  LIKE '%'+#BusinessAddr#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="OtherAddr">
          other_addr  LIKE '%'+#OtherAddr#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="PostalCode">
          postal_code  LIKE '%'+#PostalCode#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="PostBox">
          post_box  LIKE '%'+#PostBox#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="WebSite">
          web_site  LIKE '%'+#WebSite#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Email">
          email  LIKE '%'+#Email#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="IM">
          im  LIKE '%'+#IM#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Domain">
          domain  LIKE '%'+#Domain#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="MainPhone">
          main_phone  LIKE '%'+#MainPhone#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="HomePhone">
          home_phone  LIKE '%'+#HomePhone#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="MobilePhone">
          mobile_phone  LIKE '%'+#MobilePhone#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="OfficePhone">
          office_phone  LIKE '%'+#OfficePhone#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="BusinessPhone">
          business_phone  LIKE '%'+#BusinessPhone#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="OtherPhone">
          other_phone  LIKE '%'+#OtherPhone#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Fax">
          fax  LIKE '%'+#Fax#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="UserType">
          user_type  LIKE '%'+#UserType#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="UserCode">
          user_code  LIKE '%'+#UserCode#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="OrgCode">
          org_code  LIKE '%'+#OrgCode#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="CreateDate">
          create_date  LIKE '%'+#CreateDate#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="ExpireDate">
          expire_date  LIKE '%'+#ExpireDate#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="PwdExpireDate">
          pwd_expire_date  LIKE '%'+#PwdExpireDate#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="UpdateDate">
          property_update_date  LIKE '%'+#UpdateDate#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="PwdUpdateDate">
          pwd_update_date  LIKE '%'+#PwdUpdateDate#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="LastLoginDate">
          last_login_date  LIKE '%'+#LastLoginDate#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="ErrorLoginDate">
          error_login_date  LIKE '%'+#ErrorLoginDate#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Valid">
          valid  LIKE '%'+#Valid#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Index">
          sort_index  LIKE '%'+#Index#+'%'
        </isNotEmpty>
      </dynamic>
	  <dynamic prepend=" AND ">
        <isNotEmpty property="Attribute">
          attribute  LIKE '%'+#Attribute#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Property">
          property  LIKE '%'+#Property#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Ext1">
          ext1  LIKE '%'+#Ext1#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Ext2">
          ext2  LIKE '%'+#Ext2#+'%'
        </isNotEmpty>
      </dynamic>
      <dynamic prepend=" AND ">
        <isNotEmpty property="Ext3">
          ext3  LIKE '%'+#Ext3#+'%'
        </isNotEmpty>
      </dynamic>
    </sql>

    <sql id="SortUserWithCondition">
      order by
     <dynamic prepend=" ">
        <isEqual property="OrderKey" compareValue="Name">
           name
        </isEqual>
        <isEqual property="OrderKey" compareValue="DisplayName">
           display_name
        </isEqual>
        <isEqual property="OrderKey" compareValue="Desc">
          desc
        </isEqual>
        <isEqual property="OrderKey" compareValue="LastName">
          last_name
        </isEqual>
        <isEqual property="OrderKey" compareValue="FirstName">
          first_name
        </isEqual>
        <isEqual property="OrderKey" compareValue="MiddleName">
          middle_name
        </isEqual>
        <isEqual property="OrderKey" compareValue="NickName">
          nick_name
        </isEqual>
        <isEqual property="OrderKey" compareValue="Title">
          title
        </isEqual>
        <isEqual property="OrderKey" compareValue="Initials">
          initials
        </isEqual>
        <isEqual property="OrderKey" compareValue="FullName">
          full_name
        </isEqual>
        <isEqual property="OrderKey" compareValue="Prof">
          prof
        </isEqual>
        <isEqual property="OrderKey" compareValue="Position">
          position
        </isEqual>
        <isEqual property="OrderKey" compareValue="Dept">
          dept
        </isEqual>
        <isEqual property="OrderKey" compareValue="Account">
          account
        </isEqual>
        <isEqual property="OrderKey" compareValue="IDNumber">
          id_number
        </isEqual>
        <isEqual property="OrderKey" compareValue="WorkNumber">
          work_number
        </isEqual>
        <isEqual property="OrderKey" compareValue="Gender">
          gender
        </isEqual>
        <isEqual property="OrderKey" compareValue="Birthday">
          birthday
        </isEqual>
        <isEqual property="OrderKey" compareValue="Country">
          country
        </isEqual>
        <isEqual property="OrderKey" compareValue="Province">
          province
        </isEqual>
        <isEqual property="OrderKey" compareValue="City">
          city
        </isEqual>
        <isEqual property="OrderKey" compareValue="Street">
          street
        </isEqual>
        <isEqual property="OrderKey" compareValue="Addr">
          addr
        </isEqual>
        <isEqual property="OrderKey" compareValue="HomeAddr">
          home_addr
        </isEqual>
        <isEqual property="OrderKey" compareValue="OfficeAddr">
          office_addr
        </isEqual>
        <isEqual property="OrderKey" compareValue="BusinessAddr">
          business_addr
        </isEqual>
        <isEqual property="OrderKey" compareValue="OtherAddr">
          other_addr
        </isEqual>
        <isEqual property="OrderKey" compareValue="PostalCode">
          postal_code
        </isEqual>
        <isEqual property="OrderKey" compareValue="PostBox">
          post_box
        </isEqual>
        <isEqual property="OrderKey" compareValue="WebSite">
          web_site
        </isEqual>
        <isEqual property="OrderKey" compareValue="Email">
          email
        </isEqual>
        <isEqual property="OrderKey" compareValue="IM">
          im
        </isEqual>
        <isEqual property="OrderKey" compareValue="Domain">
          domain
        </isEqual>
        <isEqual property="OrderKey" compareValue="MainPhone">
          main_phone
        </isEqual>
        <isEqual property="OrderKey" compareValue="HomePhone">
          home_phone
        </isEqual>
        <isEqual property="OrderKey" compareValue="MobilePhone">
          mobile_phone
        </isEqual>
        <isEqual property="OrderKey" compareValue="OfficePhone">
          office_phone
        </isEqual>
        <isEqual property="OrderKey" compareValue="BusinessPhone">
          business_phone
        </isEqual>
        <isEqual property="OrderKey" compareValue="OtherPhone">
          other_phone
        </isEqual>
        <isEqual property="OrderKey" compareValue="Fax">
          fax
        </isEqual>
        <isEqual property="OrderKey" compareValue="UserType">
          user_type
        </isEqual>
        <isEqual property="OrderKey" compareValue="UserCode">
          user_code
        </isEqual>
        <isEqual property="OrderKey" compareValue="OrgCode">
          org_code
        </isEqual>
        <isEqual property="OrderKey" compareValue="CreateDate">
          create_date
        </isEqual>
        <isEqual property="OrderKey" compareValue="ExpireDate">
          expire_date
        </isEqual>
        <isEqual property="OrderKey" compareValue="PwdExpireDate">
          pwd_expire_date
        </isEqual>
        <isEqual property="OrderKey" compareValue="UpdateDate">
          property_update_date
        </isEqual>
        <isEqual property="OrderKey" compareValue="PwdUpdateDate">
          pwd_update_date
        </isEqual>
        <isEqual property="OrderKey" compareValue="LastLoginDate">
          last_login_date
        </isEqual>
        <isEqual property="OrderKey" compareValue="ErrorLoginDate">
          error_login_date
        </isEqual>
        <isEqual property="OrderKey" compareValue="Valid">
          valid
        </isEqual>
		<isEqual property="OrderKey" compareValue="Attribute">
          attribute
        </isEqual>
        <isEqual property="OrderKey" compareValue="Property">
          property
        </isEqual>
        <isEqual property="OrderKey" compareValue="Ext1">
          ext1
        </isEqual>
        <isEqual property="OrderKey" compareValue="Ext2">
          ext2
        </isEqual>
        <isEqual property="OrderKey" compareValue="Ext3">
          ext3
        </isEqual>
        <isNotEqual property="OrderValue" compareValue="NotSet">
            $OrderValue$,
          </isNotEqual>
      </dynamic>
      sort_index DESC
      <dynamic prepend=" ">
        <isNotEqual property="OrderKey" compareValue="Name">
          ,name ASC
        </isNotEqual>
      </dynamic>
    </sql>

	<sql id="SelectUserset">
		from ${platSchema}.t_es_userset where 1=1
		<include refid="QueryUsersetWithCondition" />
	</sql>

	<select id="QueryList" parameterClass="Map"
		resultMap="UsersetResult">
		select *
		<include refid="SelectUserset" />
		<include refid="SortUsersetWithCondition" />
	</select>

	<select id="QueryUsersetList" parameterClass="Map"
		resultMap="UsersetResult">
		select * from ${platSchema}.t_es_userset where name in (select member_name
		<include refid="SelectMember" />
		)
		<include refid="QueryUsersetWithCondition" />
		<include refid="SortUsersetWithCondition" />
	</select>

	<select id="QueryUsersetCount" resultClass="int">
		select count(1) from ${platSchema}.t_es_userset where name in (select
		member_name
		<include refid="SelectMember" />
		)
		<include refid="QueryUsersetWithCondition" />
	</select>

	<select id="QueryParentUsersetList" parameterClass="Map"
		resultMap="UsersetResult">
		select * from ${platSchema}.t_es_userset where name in (select set_name
		<include refid="SelectMember" />
		)
		<include refid="QueryUsersetWithCondition" />
		<include refid="SortUsersetWithCondition" />
	</select>

	<select id="QueryParentUsersetCount" resultClass="int">
		select count(1) from ${platSchema}.t_es_userset where name in (select set_name
		<include refid="SelectMember" />
		)
		<include refid="QueryUsersetWithCondition" />
	</select>

	<select id="QueryUserList" parameterClass="Map"
		resultMap="UserResult">
		select * from ${platSchema}.t_es_user where name in (select member_name
		<include refid="SelectMember" />
		)
		<include refid="QueryUserWithCondition" />
		<include refid="SortUserWithCondition" />
	</select>

	<select id="QueryUserCount" resultClass="int">
		select count(1) from ${platSchema}.t_es_user where name in (select member_name
		<include refid="SelectMember" />
		)
		<include refid="QueryUserWithCondition" />
	</select>

	<sql id="SelectRecursiveMember">
      declare @depth int;
      set @depth = 5;
      with temp(set_name, member_name, member_type, depth) as
      (select root.set_name, root.member_name, root.member_type, 1
      from t_es_userset_member root
      where set_name = #SetName#
      union all
      select sub.set_name, sub.member_name, sub.member_type, depth+1
      from t_es_userset_member sub, temp super
      where sub.set_name = super.member_name
      and super.member_type = #SetType#
      and depth <![CDATA[<]]> @depth)
	</sql>

	<sql id="SelectRecursiveUserset">
      declare @depth int;
      set @depth = 5;
      with temp(set_name, member_name, member_type, depth) as
      (select root.set_name, root.member_name, root.member_type, 1
      from t_es_userset_member root
      where set_name = #SetName#
      union all
      select sub.set_name, sub.member_name, sub.member_type, depth+1
      from t_es_userset_member sub, temp super
      where sub.set_name = super.member_name
      and super.member_type = #SetType#
      and depth <![CDATA[<]]> @depth)
	</sql>

	<sql id="SelectRecursiveParent">
		declare @depth int; set @depth = 5; with temp(set_name,
		member_name, member_type, depth) as (select sub.set_name,
		sub.member_name, sub.member_type, 1 from ${platSchema}.t_es_userset_member sub
		where 1=1
		<dynamic prepend=" AND ">
			<isNotEmpty property="MemberName">
				member_name = #MemberName#
			</isNotEmpty>
		</dynamic>
		<dynamic prepend=" AND ">
			<isNotEmpty property="MemberType">
				member_type = #MemberType#
			</isNotEmpty>
		</dynamic>
		union all select parent.set_name, parent.member_name,
		parent.member_type, depth+1 from ${platSchema}.t_es_userset_member parent,
		temp super where parent.member_name = super.set_name 
        and parent.member_type = #SetType#
        and depth <![CDATA[<]]> @depth)
	</sql>

	<select id="QueryRecursiveUserList" parameterClass="Map"
		resultMap="UserResult">
		<include refid="SelectRecursiveMember" />
		select * from ${platSchema}.t_es_user where name in (select member_name from
		temp  where temp.member_type=#MemberType#)
		<include refid="QueryUserWithCondition" />
		<include refid="SortUserWithCondition" />
	</select>

	<select id="QueryRecursiveUserCount" resultClass="int">
		<include refid="SelectRecursiveMember" />
		select count(1) from ${platSchema}.t_es_user where name in (select member_name
		from temp  where temp.member_type=#MemberType#)
		<include refid="QueryUserWithCondition" />
	</select>


	<select id="RecursiveMemberCount" resultClass="int">
		<include refid="SelectRecursiveMember" />
		select count(1) from temp where 1=1
		<dynamic prepend=" AND ">
			<isNotEmpty property="MemberName">
				member_name = #MemberName#
			</isNotEmpty>
		</dynamic>
		<dynamic prepend=" AND ">
			<isNotEmpty property="MemberType">
				member_type = #MemberType#
			</isNotEmpty>
		</dynamic>
	</select>

	<select id="RecursiveUsersetCount" resultClass="int">
		<include refid="SelectRecursiveUserset" />
		select count(1) from temp where 1=1
		<dynamic prepend=" AND ">
			<isNotEmpty property="MemberName">
				member_name = #MemberName#
			</isNotEmpty>
		</dynamic>
		<dynamic prepend=" AND ">
			<isNotEmpty property="MemberType">
				member_type = #MemberType#
			</isNotEmpty>
		</dynamic>
	</select>

	<select id="QueryRecursiveUsersetList" parameterClass="Map"
		resultMap="UsersetResult">
		<include refid="SelectRecursiveUserset" />
		select * from ${platSchema}.t_es_userset where name in (select member_name
		from temp  where temp.member_type=#MemberType#)
		<include refid="QueryUsersetWithCondition" />
		<include refid="SortUsersetWithCondition" />
	</select>

	<select id="QueryRecursiveUsersetCount" resultClass="int">
		<include refid="SelectRecursiveUserset" />
		select count(1) from ${platSchema}.t_es_userset where name in (select
		member_name from temp  where temp.member_type=#MemberType#)
		<include refid="QueryUsersetWithCondition" />

	</select>

	<select id="QueryRecursiveParentList" parameterClass="Map"
		resultMap="UsersetResult">
		<include refid="SelectRecursiveParent" />
		select * from ${platSchema}.t_es_userset where name in (select set_name from
		temp)
		<include refid="QueryUsersetWithCondition" />
		<include refid="SortUsersetWithCondition" />
	</select>

	<select id="QueryRecursiveParentCount" resultClass="int">
		<include refid="SelectRecursiveParent" />
		select count(1) from ${platSchema}.t_es_userset where name in (select set_name
		from temp)
		<include refid="QueryUsersetWithCondition" />
	</select>

	<delete id="Delete" parameterClass="Userset">
		delete from ${platSchema}.t_es_userset where 1=1
		<dynamic prepend=" AND ">
			<isNotEmpty property="Name">name = #Name#</isNotEmpty>
		</dynamic>
	</delete>

	<delete id="RemoveMember" parameterClass="Map">
		delete
		<include refid="SelectMember" />
	</delete>

	<select id="Count" resultClass="int">
		select count(1)
		<include refid="SelectUserset" />
	</select>

	<select id="MemberCount" resultClass="int">
		select count(1)
		<include refid="SelectMember" />
	</select>

</sqlMap>