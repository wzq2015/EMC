<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE sqlMap  PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="DynamicAuthorization">

	<typeAlias alias="DynamicAuthorization"
		type="com.baosight.platform.core.security.dynamicauthorization.DynamicAuthorization" />
	<typeAlias alias="Resource2"
		type="com.baosight.platform.core.security.resource.Resource" />
	<typeAlias alias="DynamicUserset2"
		type="com.baosight.platform.core.security.dynamicauthorization.DynamicUserset" />
	<typeAlias alias="DynamicPermissionPath"
		type="com.baosight.platform.core.security.base.DynamicPermissionPath" />

	<resultMap id="QueryResult" class="DynamicAuthorization">
		<result property="DynamicUsersetName" column="dynamic_userset_name" />
		<result property="DynamicUsersetType" column="dynamic_userset_type" />
		<result property="ObjectName" column="object_name" />
		<result property="ObjectType" column="object_type" />
		<result property="Operation" column="opt" />
	</resultMap>
	<resultMap id="ResourceListResult" class="Resource2">
		<result property="Name" column="object_name" />
		<result property="ResourceType" column="object_type" />
	</resultMap>
	
	<resultMap id="PathListResult" class="DynamicPermissionPath">
		<result property="DynamicUsersetName" column="dynamic_userset_name" />
		<result property="DynamicUsersetType" column="dynamic_userset_type" />
		<result property="PathObjectName" column="path_object_name" />
		<result property="PathObjectType" column="path_object_type" />
		<result property="ObjectName" column="object_name" />
		<result property="ObjectType" column="object_type" />
		<result property="Operation" column="opt" />
	</resultMap>
	
	<resultMap id="DynamicUsersetListResult" class="DynamicUserset2">
		<result property="DynamicUsersetName" column="dynamic_userset_name" />
		<result property="DynamicUsersetType" column="dynamic_userset_type" />
	</resultMap>

	<sql id="condition">
		where 1=1
		<dynamic prepend=" AND ">
			<isNotNull property="DynamicUsersetName">
				dynamic_userset_name = #DynamicUsersetName#
			</isNotNull>
		</dynamic>
		<dynamic prepend=" AND ">
			<isNotNull property="DynamicUsersetType">
				dynamic_userset_type = #DynamicUsersetType#
			</isNotNull>
		</dynamic>
		<dynamic prepend=" AND ">
			<isNotNull property="ObjectName">
				object_name = #ObjectName#
			</isNotNull>
		</dynamic>
		<dynamic prepend=" AND ">
			<isNotNull property="ObjectType">
				object_type = #ObjectType#
			</isNotNull>
		</dynamic>
		<dynamic prepend=" AND ">
			<isNotNull property="Operation">
				opt = #Operation#
			</isNotNull>
		</dynamic>
	</sql>

	<insert id="Insert" parameterClass="DynamicAuthorization">
		insert into
		${platSchema}.t_es_dynamic_authorization(dynamic_userset_name,dynamic_userset_type,object_name,object_type,opt)
		values(#DynamicUsersetName#, #DynamicUsersetType#, #ObjectName#, #ObjectType#,
		#Operation#)
	</insert>

	<select id="IsGrant" parameterClass="DynamicAuthorization"
		resultClass="int">
		select 1 from ${platSchema}.t_es_dynamic_authorization
		<include refid="condition" />
	</select>
	
	<delete id="Delete" parameterClass="DynamicAuthorization">
		delete from ${platSchema}.t_es_dynamic_authorization
		<include refid="condition" />
	</delete>

	<sql id="DeclareType">
		declare @resourceset_type_name varchar(8); set @resourceset_type_name =
		#ResourcesetTypeName#;
	</sql>

	<select id="DynamicUsersetHasPermission" parameterClass="DynamicAuthorization"
		resultClass="int">
		select 1 from ${platSchema}.t_es_dynamic_authorization a,
		(select #ObjectName# as object_name, #ObjectType# as object_type from dual
        union
        select distinct set_name as object_name, #ResourcesetTypeName# as object_type
        from ${platSchema}.t_es_resourceset_member
        start with member_name = #ObjectName# and member_type = #ObjectType#
        connect by prior set_name = member_name and member_type = #ResourcesetTypeName#
               and level <![CDATA[<]]>= 5) b
        where a.dynamic_userset_name = #DynamicUsersetName# and
		a.dynamic_userset_type = #DynamicUsersetType# and a.object_name =
		b.object_name and a.object_type = b.object_type and a.opt =
		#Operation# 
	</select>
	
	<select id="Count" parameterClass="DynamicAuthorization"
		resultClass="int">
		select count(1) from ${platSchema}.t_es_dynamic_authorization
		<include refid="condition" />
	</select>
	
	<select id="Query" parameterClass="DynamicAuthorization"
		resultMap="QueryResult">
		select dynamic_userset_name, dynamic_userset_type, object_name, object_type, opt
		from ${platSchema}.t_es_dynamic_authorization
		<include refid="condition" />
		order by
		<dynamic prepend=" ">
			<isEqual property="OrderKey" compareValue="DynamicUsersetName">
				dynamic_userset_name
			</isEqual>
			<isEqual property="OrderKey" compareValue="DynamicUsersetType">
				dynamic_userset_type
			</isEqual>
			<isEqual property="OrderKey" compareValue="ObjectName">
				object_name
			</isEqual>
			<isEqual property="OrderKey" compareValue="ObjectType">
				object_type
			</isEqual>
			<isEqual property="OrderKey" compareValue="Operation">
				opt
			</isEqual>
			<isNotEqual prepend=" " property="OrderValue"
				compareValue="NotSet">
				$OrderValue$
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="DynamicUsersetName">
				dynamic_userset_name
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="DynamicUsersetType">
				dynamic_userset_type
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="ObjectName">
				object_name
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="ObjectType">
				object_type
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="Operation">
				opt
			</isNotEqual>
		</dynamic>
	</select>
	
	<select id="DynamicPermissionPathCount" parameterClass="DynamicAuthorization"
		resultClass="int">
		select count(1) from ${platSchema}.t_es_dynamic_authorization a,
		(select #ObjectName# as object_name, #ObjectType# as object_type from dual
        union
        select distinct set_name as object_name, #ResourcesetTypeName# as object_type
        from ${platSchema}.t_es_resourceset_member
        start with member_name = #ObjectName# and member_type = #ObjectType#
        connect by prior set_name = member_name
               and member_type = #ResourcesetTypeName#
               and level <![CDATA[<]]>= 5) b
        where a.dynamic_userset_name = #DynamicUsersetName# and
		a.dynamic_userset_type = #DynamicUsersetType# and a.object_name =
		b.object_name and a.object_type = b.object_type and a.opt =
		#Operation#
	</select>

	<select id="DynamicPermissionPaths" parameterClass="DynamicAuthorization"
		resultMap="PathListResult">
		select a.dynamic_userset_name, a.dynamic_userset_type,
		a.opt, a.object_name as path_object_name, a.object_type as
		path_object_type, b.object_name, b.object_type from
		${platSchema}.t_es_dynamic_authorization a, 
    (select #ObjectName# as object_name, #ObjectType# as object_type, 
		#ObjectName# as p_object_name, #ObjectType# as p_object_type from dual
        union
        select distinct #ObjectName# as object_name, #ObjectType# as object_type, 
        set_name as p_object_name, #ResourcesetTypeName# as p_object_type
        from ${platSchema}.t_es_resourceset_member
        start with member_name = #ObjectName# and member_type = #ObjectType#
        connect by prior set_name = member_name and member_type = #ResourcesetTypeName#
               and level <![CDATA[<]]>= 5) b
		where a.dynamic_userset_name =
		#DynamicUsersetName# and a.dynamic_userset_type = #DynamicUsersetType# and
		a.object_name = b.p_object_name and a.object_type =
		b.p_object_type and a.opt = #Operation# order by
		<dynamic prepend=" ">
			<isEqual property="OrderKey"
				compareValue="DynamicUsersetName">
				a.dynamic_userset_name
			</isEqual>
			<isEqual property="OrderKey"
				compareValue="DynamicUsersetType">
				a.dynamic_userset_type
			</isEqual>
			<isEqual property="OrderKey"
				compareValue="PathObjectName">
				a.object_name
			</isEqual>
			<isEqual property="OrderKey"
				compareValue="PathObjectType">
				a.object_type
			</isEqual>
			<isNotEqual prepend=" " property="OrderValue"
				compareValue="NotSet">
				$OrderValue$
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="DynamicUsersetName">
				a.dynamic_userset_name
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="DynamicUsersetType">
				a.dynamic_userset_type
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="PathObjectName">
				a.object_name
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="PathObjectType">
				a.object_type
			</isNotEqual>
		</dynamic>
	</select>

	<sql id="SelectDynamicUsersetPermissions"> 
		(select * from
			(select object_name, object_type from 
				  (
				    select distinct object_name, object_type from ${platSchema}.t_es_dynamic_authorization a
				    where a.dynamic_userset_name = #DynamicUsersetName# and
				    a.dynamic_userset_type = #DynamicUsersetType# and a.opt = #Operation#
				  )
			 )  a where a.object_type <![CDATA[<>]]> #ResourcesetTypeName#
			union 
			select member_name as object_name, member_type as object_type
			from ${platSchema}.t_es_resourceset_member
			where member_type <![CDATA[<>]]> #ResourcesetTypeName#
			start with set_name in 
			(select object_name from   
			 (select object_name, object_type from 
				  (
				    select distinct object_name, object_type from ${platSchema}.t_es_dynamic_authorization a
				    where a.dynamic_userset_name = #DynamicUsersetName# and
				    a.dynamic_userset_type = #DynamicUsersetType# and a.opt = #Operation#
				  )
			  ) where object_type = #ResourcesetTypeName#)
			connect by prior member_name = set_name and prior member_type = #ResourcesetTypeName#
			and level <![CDATA[<]]>= 5)
	</sql>

	<select id="DynamicUsersetPermissionCount" parameterClass="DynamicAuthorization"
		resultClass="int">
		select count(1) from ( select distinct a.object_name, a.object_type from <include refid="SelectDynamicUsersetPermissions" /> a)
	</select>

	<select id="DynamicUsersetPermissions" parameterClass="DynamicAuthorization"
		resultMap="ResourceListResult">
		select distinct a.object_name, a.object_type from <include refid="SelectDynamicUsersetPermissions" /> a
		order by
		<dynamic prepend=" ">
			<isEqual property="OrderKey" compareValue="ResourceName">
				object_name $OrderValue$,object_type ASC
			</isEqual>
			<isEqual property="OrderKey" compareValue="ResourceType">
				object_type $OrderValue$,object_name ASC
			</isEqual>
			<isEqual property="OrderKey" compareValue="NotSet">
				object_name ASC,object_type ASC
			</isEqual>
		</dynamic>
	</select>
	
	<sql id="SelectDynamicUsersetPermissionPaths">
		select dynamic_userset_name, dynamic_userset_type, p_object_name, p_object_type, object_name, object_type from
		(select distinct a.dynamic_userset_name, a.dynamic_userset_type, a.object_name as p_object_name, a.object_type as p_object_type, a.object_name as object_name, 
		a.object_type as object_type from
		${platSchema}.t_es_dynamic_authorization a
    where a.dynamic_userset_name = #DynamicUsersetName# and
		a.dynamic_userset_type = #DynamicUsersetType# and a.opt = #Operation#
		) aa where aa.object_type <![CDATA[<>]]> #ResourcesetTypeName# 
		union
		select dynamic_userset_name, dynamic_userset_type, p_object_name, p_object_type, object_name, object_type from 
		(select distinct e.dynamic_userset_name, e.dynamic_userset_type, d.p_object_name as p_object_name, d.p_object_type as p_object_type, d.object_name as object_name, 
		d.object_type as object_type from ${platSchema}.t_es_dynamic_authorization e, 
		(
			select distinct a.set_name as p_object_name, #ResourcesetTypeName# as p_object_type, a.member_name as object_name, a.member_type as object_type from
		       (  
		        select CONNECT_BY_ROOT(set_name) as set_name,member_name,member_type from ${platSchema}.t_es_resourceset_member
		        where member_type <![CDATA[<>]]> #ResourcesetTypeName#
		        connect by prior member_name = set_name
		        and prior member_type = #ResourcesetTypeName#
		        and level <![CDATA[<]]>= 5
		        )a,
      		(
     			 select object_name from   			  
				(
					select a.object_name as p_object_name, a.object_type as p_object_type, a.object_name as object_name, 
					a.object_type as object_type from
					${platSchema}.t_es_dynamic_authorization a
			    	where a.dynamic_userset_name = #DynamicUsersetName# and
					a.dynamic_userset_type = #DynamicUsersetType# and a.opt = #Operation#
				) where object_type = #ResourcesetTypeName#
			) b
			where a.set_name=b.object_name) d
		where  e.dynamic_userset_name = #DynamicUsersetName# and
		e.dynamic_userset_type = #DynamicUsersetType# and e.opt = #Operation# and
        e.object_name = d.p_object_name and e.object_type = d.p_object_type 
		and d.object_type <![CDATA[<>]]> #ResourcesetTypeName#)
	</sql>

	<select id="DynamicUsersetPermissionPathCount" parameterClass="DynamicAuthorization"
		resultClass="int">
		select count(1) from ( <include refid="SelectDynamicUsersetPermissionPaths" /> )
	</select>

	<select id="DynamicUsersetPermissionPaths" parameterClass="DynamicAuthorization"
		resultMap="PathListResult">
		select distinct 
		#DynamicUsersetName# as dynamic_userset_name, 
		#DynamicUsersetType# as dynamic_userset_type, 
		#Operation# as opt,
		p_object_name as path_object_name, 
		p_object_type as path_object_type, 
		object_name, 
		object_type 
		from ( <include refid="SelectDynamicUsersetPermissionPaths" /> )
		order by
		<dynamic prepend=" ">
			<isEqual property="OrderKey"
				compareValue="DynamicUsersetName">
				dynamic_userset_name
			</isEqual>
			<isEqual property="OrderKey"
				compareValue="DynamicUsersetType">
				dynamic_userset_type
			</isEqual>
			<isEqual property="OrderKey"
				compareValue="PathObjectName">
				p_object_name
			</isEqual>
			<isEqual property="OrderKey"
				compareValue="PathObjectType">
				p_object_type
			</isEqual>
			<isEqual property="OrderKey" compareValue="ObjectName">
				object_name
			</isEqual>
			<isEqual property="OrderKey" compareValue="ObjectType">
				object_type
			</isEqual>
			<isNotEqual prepend=" " property="OrderValue"
				compareValue="NotSet">
				$OrderValue$
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="DynamicUsersetName">
				dynamic_userset_name
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="DynamicUsersetType">
				dynamic_userset_type
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="PathObjectName">
				p_object_name
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="PathObjectType">
				p_object_type
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="ObjectName">
				object_name
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="ObjectType">
				object_type
			</isNotEqual>
		</dynamic>
	</select>
	
	<sql id="SelectResourceDynamicPermissions">  
			(select * from
				(select dynamic_userset_name, dynamic_userset_type from 
				  (
				    select distinct dynamic_userset_name, dynamic_userset_type from ${platSchema}.t_es_dynamic_authorization a,
				    (
				      select #ObjectName# as object_name, #ObjectType# as object_type from dual
				      union
				      select distinct set_name as object_name, #ResourcesetTypeName# as object_type
				      from ${platSchema}.t_es_resourceset_member
				      start with member_name = #ObjectName# and member_type = #ObjectType# 
				      connect by prior set_name = member_name
				      and member_type = #ResourcesetTypeName#
				      and level <![CDATA[<]]>= 5
				    ) b
				    where a.object_name = b.object_name and
				    a.object_type = b.object_type and a.opt = #Operation#
				  )
				 )
				)
	</sql>

	<select id="ResourceDynamicPermissionCount" parameterClass="DynamicAuthorization"
		resultClass="int">
		select count(1) from ( select distinct aa.* from <include refid="SelectResourceDynamicPermissions" /> aa)
	</select>

	<select id="ResourceDynamicPermissions" parameterClass="DynamicAuthorization"
		resultMap="DynamicUsersetListResult">
		select aa.* from <include refid="SelectResourceDynamicPermissions" /> aa
		order by
     <dynamic prepend=" ">
			<isEqual property="OrderKey" compareValue="DynamicUsersetName">
				dynamic_userset_name $OrderValue$,dynamic_userset_type ASC
			</isEqual>
			<isEqual property="OrderKey" compareValue="DynamicUsersetType">
				dynamic_userset_type $OrderValue$,dynamic_userset_name ASC
			</isEqual>
			<isEqual property="OrderKey" compareValue="NotSet">
				dynamic_userset_name ASC,dynamic_userset_type ASC
			</isEqual>
	  </dynamic>
	</select>
	
	<sql id="SelectResourceDynamicPermissionPaths">
		select dynamic_userset_name, dynamic_userset_type, p_object_name, p_object_type from
		(
			select distinct a.dynamic_userset_name as dynamic_userset_name, a.dynamic_userset_type as dynamic_userset_type, 
			b.p_object_name as p_object_name, b.p_object_type as p_object_type from
			${platSchema}.t_es_dynamic_authorization a, 
			(
				select #ObjectName# as object_name, #ObjectType# as object_type, 
				#ObjectName# as p_object_name, #ObjectType# as p_object_type from dual
				union
				select distinct #ObjectName# as object_name, #ObjectType# as object_type, 
				set_name as p_object_name, #ResourcesetTypeName# as p_object_type
				from ${platSchema}.t_es_resourceset_member
				start with member_name = #ObjectName# and member_type = #ObjectType#
				connect by prior set_name = member_name and member_type = #ResourcesetTypeName#
				and level <![CDATA[<]]>= 5
			) b
			where a.object_name = b.p_object_name and
			a.object_type = b.p_object_type and a.opt = #Operation#
		)	
	</sql>

	<select id="ResourceDynamicPermissionPathCount"
		parameterClass="DynamicAuthorization" resultClass="int">
		select count(1) from (<include refid="SelectResourceDynamicPermissionPaths" /> )
	</select>

	<select id="ResourceDynamicPermissionPaths" parameterClass="DynamicAuthorization"
		resultMap="PathListResult">
		select distinct 
		dynamic_userset_name, 
		dynamic_userset_type, 
		#Operation# as opt,
		p_object_name as path_object_name, 
		p_object_type as path_object_type, 
		#ObjectName# as object_name, 
		#ObjectType# as object_type 
		from (<include refid="SelectResourceDynamicPermissionPaths" />)
		order by
		<dynamic prepend=" ">
			<isEqual property="OrderKey" compareValue="DynamicUsersetName">
				dynamic_userset_name
			</isEqual>
			<isEqual property="OrderKey" compareValue="DynamicUsersetType">
				dynamic_userset_type
			</isEqual>
			<isEqual property="OrderKey"
				compareValue="PathObjectName">
				p_object_name
			</isEqual>
			<isEqual property="OrderKey"
				compareValue="PathObjectType">
				p_object_type
			</isEqual>
			<isNotEqual prepend=" " property="OrderValue"
				compareValue="NotSet">
				$OrderValue$
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="DynamicUsersetName">
				dynamic_userset_name
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="DynamicUsersetType">
				dynamic_userset_type
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="PathObjectName">
				p_object_name
			</isNotEqual>
			<isNotEqual prepend="," property="OrderKey"
				compareValue="PathObjectType">
				p_object_type
			</isNotEqual>
		</dynamic>
	</select>
	
</sqlMap>